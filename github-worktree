#!/bin/bash

pull_cache="$HOME/.cache/github-rofi/pulls.json"

cd "$(dirname "$(readlink "${BASH_SOURCE[0]}")")" || exit 1
./update_cache.sh

rows() {
    jq --from-file pulls_to_branches.jq --raw-output < "$pull_cache" | \
    while read -r repo pr branch title; do
        printf "%-26s [%4d] %-26s %s\n" "$repo" "$pr" "$branch" "$title"
    done
}

hit=$(
    (
        rows && \
        echo "refresh"
    ) | rofi -width 70 -dmenu -theme Arc-Dark -i)
if [ -z "$hit" ]; then
    exit 0
fi
if [ "$hit" == "refresh" ]; then
    ./update_cache.sh --force
    exit 0
fi

read -r repo branch title <<<"${hit/\[????\]}"

get_folder() {
    repo="$1"

    repo="${repo/AiflooAB\//noomi/}"

    echo "$HOME/code/$repo"
}

get_worktree() {
    repo="$1"
    branch="$2"

    repo_dir="$(get_folder "$repo")"
    worktree="${branch//\//-}"

    echo "$repo_dir.$worktree"
}

repo_dir="$(get_folder "$repo")"

initfile=$(mktemp --suffix github-pr-init)
trap 'rm "$initfile"' EXIT

cat << EOF > "$initfile"
#!/bin/bash
set -euo pipefail
set -x
trap 'exec "$BASH"' EXIT 
EOF
chmod +x "$initfile"

if ! [ -d "$repo_dir" ]; then
    cat << EOF >> "$initfile"
# Can't find repository, cloning git@github.com/$repo into $repo_dir
git clone "git@github.com/$repo" "$repo_dir"
EOF
fi

worktree_dir="$(get_worktree "$repo" "$branch")"

if ! git -C "$repo_dir" show-ref --verify --quiet "refs/remotes/origin/$branch"; then
    cat << EOF >> "$initfile"
# Remote branch doesn't exist, fetching..
git -C "$repo_dir" fetch origin
EOF
fi

if ! [ -d "$worktree_dir" ]; then
    cat << EOF >> "$initfile"
# No worktree exists, creating it..
if git -C "$repo_dir" rev-parse --quiet --verify "$branch" > /dev/null; then
  git -C "$repo_dir" worktree add --guess-remote "$worktree_dir" "$branch"
else
  git -C "$repo_dir" worktree add --track -b "$branch" "$worktree_dir" "origin/$branch"
fi
EOF
fi

cat << EOF >> "$initfile"
cd "$worktree_dir"
git -C "$repo_dir" fetch origin "$branch"
EOF

x-terminal-emulator --workdir "$worktree_dir" -e "$initfile"
